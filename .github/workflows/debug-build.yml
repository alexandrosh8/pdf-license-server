name: Debug Build - PDF Metadata Tool

on:
  push:
    paths:
      - 'client.py'
      - '.github/workflows/debug-build.yml'
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  debug-build:
    name: Debug PyInstaller Build
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Debug - Show environment
      run: |
        Write-Host "=== ENVIRONMENT DEBUG ==="
        Write-Host "Python version:"
        python --version
        Write-Host "pip version:"
        pip --version
        Write-Host "Current directory:"
        Get-Location
        Write-Host "Files in current directory:"
        Get-ChildItem | Format-Table Name, Length, LastWriteTime
        Write-Host "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        Write-Host "Environment variables:"
        Write-Host "PATH: $env:PATH"
        Write-Host "PYTHONPATH: $env:PYTHONPATH"
        
    - name: Check client.py exists and basic info
      run: |
        Write-Host "=== CLIENT.PY DEBUG ==="
        if (Test-Path "client.py") {
          Write-Host "✅ client.py found"
          $fileInfo = Get-Item "client.py"
          Write-Host "File size: $($fileInfo.Length) bytes"
          Write-Host "Last modified: $($fileInfo.LastWriteTime)"
          
          Write-Host "`n=== FIRST 20 LINES OF CLIENT.PY ==="
          Get-Content "client.py" -TotalCount 20 | ForEach-Object { Write-Host $_ }
          
          Write-Host "`n=== CHECKING FOR SYNTAX ERRORS ==="
          try {
            python -m py_compile client.py
            Write-Host "✅ Syntax validation passed"
          } catch {
            Write-Host "❌ Syntax error detected:"
            Write-Host $_.Exception.Message
            Write-Host "Full error details:"
            Write-Host $_
            exit 1
          }
          
          Write-Host "`n=== CHECKING FOR ENCODING ISSUES ==="
          try {
            python -c "with open('client.py', 'r', encoding='utf-8') as f: content = f.read(); print(f'File read successfully: {len(content)} characters')"
            Write-Host "✅ File encoding is valid"
          } catch {
            Write-Host "❌ File encoding issue: $_"
          }
          
          Write-Host "`n=== SEARCHING FOR POTENTIAL ISSUES ==="
          $content = Get-Content "client.py" -Raw
          if ($content -match "async def|await ") {
            Write-Host "⚠️ Found async/await code - may need special handling"
          }
          if ($content -match "import win32|import pywin32") {
            Write-Host "⚠️ Found Windows-specific imports"
          }
          if ($content -match "__main__") {
            Write-Host "✅ Found __main__ block"
          }
          
        } else {
          Write-Host "❌ client.py not found!"
          Write-Host "Available files:"
          Get-ChildItem | Format-Table Name, Length
          exit 1
        }
        
    - name: Install pip and basic tools
      run: |
        Write-Host "=== INSTALLING BASIC TOOLS ==="
        try {
          python -m pip install --upgrade pip setuptools wheel
          Write-Host "✅ pip, setuptools, wheel upgraded successfully"
          
          Write-Host "Installed versions:"
          python -c "import pip; print(f'pip: {pip.__version__}')"
          python -c "import setuptools; print(f'setuptools: {setuptools.__version__}')"
          python -c "import wheel; print(f'wheel: {wheel.__version__}')"
        } catch {
          Write-Host "❌ Failed to upgrade basic tools: $_"
          exit 1
        }
        
    - name: Test PyInstaller installation
      run: |
        Write-Host "=== PYINSTALLER INSTALLATION TEST ==="
        try {
          Write-Host "Installing PyInstaller 6.7.0..."
          python -m pip install pyinstaller==6.7.0
          Write-Host "✅ PyInstaller installed"
          
          Write-Host "PyInstaller version:"
          pyinstaller --version
          
          Write-Host "PyInstaller location:"
          python -c "import PyInstaller; print(PyInstaller.__file__)"
          
          Write-Host "`n=== TESTING PYINSTALLER WITH SIMPLE SCRIPT ==="
          $testScript = @"
print('Hello from PyInstaller test')
import sys
print(f'Python version: {sys.version}')
print('Test completed successfully')
"@
          $testScript | Out-File -FilePath "test_simple.py" -Encoding utf8
          
          Write-Host "Created test script, running PyInstaller..."
          pyinstaller --onefile --clean --noconfirm --log-level INFO test_simple.py
          
          Write-Host "Checking build results..."
          if (Test-Path "dist") {
            Write-Host "✅ dist/ directory created"
            Get-ChildItem "dist" | Format-Table Name, Length
          }
          
          if (Test-Path "dist/test_simple.exe") {
            Write-Host "✅ Basic PyInstaller test successful"
            $testExe = Get-Item "dist/test_simple.exe"
            Write-Host "Test executable size: $($testExe.Length) bytes"
            
            Write-Host "Testing the executable:"
            try {
              $output = & "dist/test_simple.exe"
              Write-Host "Executable output: $output"
              Write-Host "✅ Executable runs successfully"
            } catch {
              Write-Host "⚠️ Executable created but failed to run: $_"
            }
            
            # Clean up test files
            Write-Host "Cleaning up test files..."
            Remove-Item -Path "dist", "build" -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item -Path "test_simple.py", "test_simple.spec" -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "❌ Basic PyInstaller test failed - no executable created"
            Write-Host "Contents of current directory:"
            Get-ChildItem -Recurse | Format-Table Name, FullName
            
            Write-Host "Looking for error logs..."
            Get-ChildItem -Filter "*.log" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "=== LOG: $($_.Name) ==="
              Get-Content $_.FullName
            }
            exit 1
          }
        } catch {
          Write-Host "❌ PyInstaller installation/test failed:"
          Write-Host $_.Exception.Message
          Write-Host "Full error: $_"
          exit 1
        }
        
    - name: Install application dependencies
      run: |
        Write-Host "=== INSTALLING APPLICATION DEPENDENCIES ==="
        $dependencies = @(
          "aiohttp>=3.8.0",
          "aiofiles>=0.8.0", 
          "psutil>=5.8.0",
          "requests>=2.25.0",
          "cryptography>=3.4.0",
          "pywin32>=227"
        )
        
        foreach ($dep in $dependencies) {
          try {
            Write-Host "Installing $dep..."
            python -m pip install $dep
            Write-Host "✅ $dep installed"
          } catch {
            Write-Host "❌ Failed to install ${dep}: $_"
            exit 1
          }
        }
        
        Write-Host "`n=== VERIFYING IMPORTS ==="
        $importTests = @{
          "aiohttp" = "import aiohttp; print(f'aiohttp {aiohttp.__version__}')"
          "aiofiles" = "import aiofiles; print('aiofiles OK')"
          "psutil" = "import psutil; print(f'psutil {psutil.__version__}')"
          "requests" = "import requests; print(f'requests {requests.__version__}')"
          "cryptography" = "import cryptography; print(f'cryptography {cryptography.__version__}')"
        }
        
        foreach ($name in $importTests.Keys) {
          try {
            python -c $importTests[$name]
            Write-Host "✅ $name import successful"
          } catch {
            Write-Host "❌ $name import failed: $_"
          }
        }
        
        Write-Host "`n=== TESTING WINDOWS-SPECIFIC IMPORTS ==="
        try {
          python -c "import win32api; print(f'win32api available')"
          Write-Host "✅ win32api available"
        } catch {
          Write-Host "⚠️ win32api not available: $_"
        }
        
        try {
          python -c "import win32con; print('win32con available')"
          Write-Host "✅ win32con available" 
        } catch {
          Write-Host "⚠️ win32con not available: $_"
        }
        
    - name: Analyze client.py imports and compatibility
      run: |
        Write-Host "=== ANALYZING CLIENT.PY IMPORTS ==="
        try {
          Write-Host "Testing basic Python modules..."
          $basicImports = @(
            "import asyncio",
            "import json", 
            "import hashlib",
            "import platform",
            "import subprocess", 
            "import sys",
            "import time",
            "import shutil",
            "import tempfile",
            "import zipfile",
            "from pathlib import Path",
            "from datetime import datetime, timedelta",
            "import os",
            "import logging",
            "import threading",
            "from concurrent.futures import ThreadPoolExecutor",
            "import signal"
          )
          
          foreach ($import in $basicImports) {
            try {
              python -c $import
              Write-Host "✅ $import"
            } catch {
              Write-Host "❌ $import - Error: $_"
            }
          }
          
          Write-Host "`n=== TESTING ADVANCED IMPORTS ==="
          $advancedImports = @(
            "import aiohttp",
            "import aiofiles", 
            "import requests",
            "import psutil",
            "import cryptography"
          )
          
          foreach ($import in $advancedImports) {
            try {
              python -c $import
              Write-Host "✅ $import"
            } catch {
              Write-Host "❌ $import - Error: $_"
            }
          }
          
          Write-Host "`n=== TESTING CLIENT.PY IMPORT ==="
          try {
            # Try to import the client module without running it
            python -c "import sys; sys.argv = ['client.py']; exec(open('client.py').read().replace('if __name__ == \"__main__\":', 'if False:'))"
            Write-Host "✅ client.py imports successfully"
          } catch {
            Write-Host "❌ client.py import failed: $_"
            Write-Host "This suggests there may be an issue with the client.py code structure"
          }
          
        } catch {
          Write-Host "❌ Import analysis failed: $_"
        }
        
    - name: Try PyInstaller build with detailed logging
      run: |
        Write-Host "=== PYINSTALLER BUILD WITH DETAILED LOGGING ==="
        try {
          Write-Host "Starting PyInstaller build of client.py..."
          Write-Host "Build command: pyinstaller --onefile --clean --noconfirm --name debug-client --log-level DEBUG client.py"
          
          # Create the build command with error handling
          $buildResult = pyinstaller --onefile --clean --noconfirm --name "debug-client" --log-level DEBUG client.py 2>&1
          
          Write-Host "PyInstaller command completed"
          Write-Host "Build output:"
          Write-Host $buildResult
          
          Write-Host "`n=== ANALYZING BUILD RESULTS ==="
          Write-Host "Contents of current directory after build:"
          Get-ChildItem | Format-Table Name, Length
          
          if (Test-Path "dist") {
            Write-Host "✅ dist/ directory created"
            Write-Host "dist/ contents:"
            Get-ChildItem "dist" | Format-Table Name, Length
            
            if (Test-Path "dist/debug-client.exe") {
              $exe = Get-Item "dist/debug-client.exe"
              Write-Host "✅ BUILD SUCCESSFUL! Executable created"
              Write-Host "Executable: $($exe.Name)"
              Write-Host "Size: $($exe.Length) bytes"
              Write-Host "Created: $($exe.CreationTime)"
              
              Write-Host "`n=== TESTING EXECUTABLE ==="
              try {
                # Set build mode environment variable
                $env:PYINSTALLER_BUILD_TEST = "true"
                Write-Host "Testing executable with --build flag..."
                $testOutput = & "dist/debug-client.exe" --build 2>&1
                Write-Host "Executable test output: $testOutput"
                Write-Host "✅ Executable test completed"
              } catch {
                Write-Host "⚠️ Executable test failed (may be due to license validation): $_"
                Write-Host "This might be expected behavior"
              }
            } else {
              Write-Host "❌ BUILD FAILED - No executable found in dist/"
            }
          } else {
            Write-Host "❌ BUILD FAILED - No dist/ directory created"
          }
          
          if (Test-Path "build") {
            Write-Host "`n=== BUILD DIRECTORY ANALYSIS ==="
            Write-Host "build/ directory contents:"
            Get-ChildItem "build" -Recurse | Select-Object Name, FullName, Length | Format-Table
          } else {
            Write-Host "❌ No build/ directory created"
          }
          
          Write-Host "`n=== LOOKING FOR SPEC FILES ==="
          $specFiles = Get-ChildItem -Filter "*.spec"
          if ($specFiles) {
            foreach ($spec in $specFiles) {
              Write-Host "=== SPEC FILE: $($spec.Name) ==="
              Get-Content $spec.FullName
            }
          } else {
            Write-Host "No .spec files found"
          }
          
          Write-Host "`n=== LOOKING FOR LOG FILES ==="
          $logFiles = Get-ChildItem -Filter "*.log" -Recurse -ErrorAction SilentlyContinue
          if ($logFiles) {
            foreach ($log in $logFiles | Select-Object -First 3) {
              Write-Host "=== LOG FILE: $($log.Name) ==="
              $logContent = Get-Content $log.FullName -ErrorAction SilentlyContinue
              if ($logContent.Length -gt 100) {
                Write-Host "First 50 lines:"
                $logContent | Select-Object -First 50 | ForEach-Object { Write-Host $_ }
                Write-Host "`nLast 50 lines:"
                $logContent | Select-Object -Last 50 | ForEach-Object { Write-Host $_ }
              } else {
                $logContent | ForEach-Object { Write-Host $_ }
              }
            }
          } else {
            Write-Host "No log files found"
          }
          
          # Check if build was successful
          if (-not (Test-Path "dist/debug-client.exe")) {
            Write-Host "❌ BUILD FAILED - Exiting with error"
            exit 1
          }
          
        } catch {
          Write-Host "❌ Build process exception occurred:"
          Write-Host "Exception Message: $($_.Exception.Message)"
          Write-Host "Exception Type: $($_.Exception.GetType().FullName)"
          Write-Host "Full Exception: $_"
          Write-Host "Stack Trace: $($_.ScriptStackTrace)"
          exit 1
        }
        
    - name: Upload comprehensive debug artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-debug-artifacts
        path: |
          dist/
          build/
          *.spec
          *.log
          **/*.log
        retention-days: 7
        if-no-files-found: warn
        
    - name: Final debug summary
      if: always()
      run: |
        Write-Host "=== FINAL DEBUG SUMMARY ==="
        Write-Host "Build workflow completed"
        Write-Host "Timestamp: $(Get-Date)"
        
        if (Test-Path "dist/debug-client.exe") {
          $exe = Get-Item "dist/debug-client.exe"
          Write-Host "🎉 SUCCESS: Executable created successfully!"
          Write-Host "   File: $($exe.Name)"
          Write-Host "   Size: $($exe.Length) bytes"
          Write-Host "   Path: $($exe.FullName)"
          Write-Host ""
          Write-Host "✅ Your build is working! You can now use the production build workflow."
        } else {
          Write-Host "❌ FAILED: No executable was created"
          Write-Host "   Check the logs above for specific error messages"
          Write-Host "   Look at the uploaded artifacts for detailed build logs"
          Write-Host ""
          Write-Host "🔍 Common issues to check:"
          Write-Host "   1. Syntax errors in client.py"
          Write-Host "   2. Missing import statements"
          Write-Host "   3. Async/await code issues"
          Write-Host "   4. Windows-specific import problems"
          Write-Host "   5. License validation blocking build process"
        }
        
        Write-Host "`n📋 Next steps:"
        Write-Host "   1. Review the detailed logs above"
        Write-Host "   2. Download and examine the debug artifacts"
        Write-Host "   3. Fix any identified issues in client.py"
        Write-Host "   4. Run this debug build again to verify fixes"
        Write-Host "   5. Switch to production build once working"
