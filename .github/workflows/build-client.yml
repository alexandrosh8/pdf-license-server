name: Build Client EXE

on:
  push:
    paths:
      - 'client.py'
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v2.3.0)'
        required: false
        default: ''

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install aiohttp aiofiles requests psutil cryptography pywin32

    - name: Generate version
      id: version
      run: |
        if ("${{ github.event.inputs.version }}" -ne "") {
          echo "VERSION=${{ github.event.inputs.version }}" >> $env:GITHUB_OUTPUT
        } else {
          $date = Get-Date -Format "yyyy.MM.dd"
          $run = "${{ github.run_number }}"
          echo "VERSION=v$date.$run" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh

    - name: Update version in client.py
      run: |
        $content = Get-Content client.py -Raw
        $content = $content -replace 'VERSION = "[^"]*"', 'VERSION = "${{ steps.version.outputs.VERSION }}"'
        Set-Content client.py $content
      shell: pwsh

    - name: Build EXE with PyInstaller
      run: |
        pyinstaller --onefile `
          --name "PDF-Metadata-Tool-${{ steps.version.outputs.VERSION }}" `
          --windowed `
          --hidden-import=aiohttp `
          --hidden-import=aiofiles `
          --hidden-import=asyncio `
          --hidden-import=requests `
          --hidden-import=psutil `
          --hidden-import=cryptography `
          --hidden-import=pkg_resources.extern `
          --hidden-import=win32api `
          --hidden-import=win32con `
          --hidden-import=win32gui `
          --hidden-import=pywintypes `
          client.py
      shell: pwsh

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: PDF Metadata Tool ${{ steps.version.outputs.VERSION }}
        body: |
          ## PDF Metadata Tool ${{ steps.version.outputs.VERSION }}
          
          ### What's New
          - Automatic update from server deployment
          - Built on: ${{ github.event.head_commit.timestamp }}
          - Commit: ${{ github.sha }}
          
          ### Installation
          1. Download the .exe file below
          2. Run the executable
          3. Enter your license key when prompted
          
          ### Auto-Update
          The application will automatically check for updates on startup.
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/PDF-Metadata-Tool-${{ steps.version.outputs.VERSION }}.exe
        asset_name: PDF-Metadata-Tool-${{ steps.version.outputs.VERSION }}.exe
        asset_content_type: application/octet-stream

    - name: Notify License Server
      run: |
        $body = @{
          version = "${{ steps.version.outputs.VERSION }}"
          download_url = "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/PDF-Metadata-Tool-${{ steps.version.outputs.VERSION }}.exe"
          release_date = Get-Date -Format "yyyy-MM-dd'T'HH:mm:ss'Z'"
          build_number = "${{ github.run_number }}"
          commit_sha = "${{ github.sha }}"
        } | ConvertTo-Json
        
        try {
          Invoke-RestMethod -Uri "${{ secrets.LICENSE_SERVER_URL }}/api/release-notification" `
            -Method POST `
            -Body $body `
            -ContentType "application/json" `
            -Headers @{ "X-GitHub-Token" = "${{ secrets.WEBHOOK_SECRET }}" }
          Write-Host "Successfully notified license server"
        } catch {
          Write-Host "Failed to notify license server: $_"
        }
      shell: pwsh
