name: Build Client EXE

on:
  push:
    paths:
      - 'client.py'
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v2.3.0)'
        required: false
        default: ''

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build:
    runs-on: windows-latest
    
    env:
      CI: true
      GITHUB_ACTIONS: true
      BUILD_MODE: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies with error handling
      run: |
        echo "🔧 Installing dependencies..."
        python -m pip install --upgrade pip
        
        echo "📦 Installing PyInstaller..."
        pip install pyinstaller
        
        echo "📦 Installing core dependencies..."
        pip install aiohttp aiofiles requests psutil cryptography pywin32
        
        echo "📦 Installing PDF processing (CRITICAL)..."
        pip install pikepdf
        
        echo "📦 Installing additional PDF dependencies..."
        pip install pillow PyPDF2 pypdf pymupdf reportlab urllib3 certifi
        pip install packaging setuptools wheel
        
        echo "✅ All dependencies installed successfully"
        
        echo "🔍 Verifying critical dependencies:"
        try {
          python -c "import pikepdf; print('✅ pikepdf:', pikepdf.__version__)"
          python -c "import aiohttp; print('✅ aiohttp:', aiohttp.__version__)"
          python -c "import cryptography; print('✅ cryptography:', cryptography.__version__)"
          python -c "import pyinstaller; print('✅ pyinstaller available')"
        } catch {
          echo "❌ Dependency verification failed: $($_.Exception.Message)"
          exit 1
        }
      shell: pwsh

    - name: Verify client.py exists and show info
      run: |
        if (Test-Path "client.py") {
          echo "✅ client.py found"
          $size = (Get-Item "client.py").Length
          echo "📄 File size: $([math]::Round($size / 1KB, 2)) KB"
          
          echo "📋 First few lines of client.py:"
          Get-Content "client.py" -TotalCount 10
        } else {
          echo "❌ client.py not found!"
          echo "📁 Contents of current directory:"
          Get-ChildItem
          exit 1
        }
      shell: pwsh

    - name: Generate version
      id: version
      run: |
        if ("${{ github.event.inputs.version }}" -ne "") {
          echo "VERSION=${{ github.event.inputs.version }}" >> $env:GITHUB_OUTPUT
          echo "🏷️ Using manual version: ${{ github.event.inputs.version }}"
        } else {
          $date = Get-Date -Format "yyyy.MM.dd"
          $run = "${{ github.run_number }}"
          $version = "v$date.$run"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "🏷️ Auto-generated version: $version"
        }
      shell: pwsh

    - name: Update version in client.py
      run: |
        if (Test-Path "client.py") {
          $content = Get-Content client.py -Raw -Encoding UTF8
          
          # Update version strings
          $content = $content -replace 'VERSION\s*=\s*"[^"]*"', 'VERSION = "${{ steps.version.outputs.VERSION }}"'
          $content = $content -replace '__version__\s*=\s*"[^"]*"', '__version__ = "${{ steps.version.outputs.VERSION }}"'
          
          Set-Content client.py $content -Encoding UTF8
          echo "✅ Updated version in file: ${{ steps.version.outputs.VERSION }}"
        }
      shell: pwsh

    - name: Test client.py in build mode with enhanced error handling
      run: |
        echo "🧪 Testing client.py in BUILD MODE..."
        echo "🔍 Environment variables:"
        echo "   CI: $env:CI"
        echo "   GITHUB_ACTIONS: $env:GITHUB_ACTIONS"  
        echo "   BUILD_MODE: $env:BUILD_MODE"
        echo "🐍 Python info:"
        python --version
        echo "📁 Current directory: $(pwd)"
        
        echo "🚀 Attempting to run client.py..."
        try {
          # Run with timeout and capture output
          $output = python client.py 2>&1
          echo "📋 Python script output:"
          echo $output
          echo "✅ Python script executed successfully"
        } catch {
          echo "❌ Python script failed: $($_.Exception.Message)"
          echo "📋 Attempting to show any error details..."
          python client.py
          exit 1
        }
      shell: pwsh
      env:
        BUILD_MODE: true

    - name: Build EXE with enhanced error handling
      run: |
        echo "🚀 Building production executable..."
        echo "📁 Current directory: $(pwd)"
        echo "🐍 Python location: $(which python)"
        python --version
        
        $exeName = "PDF-Metadata-Tool-${{ steps.version.outputs.VERSION }}"
        echo "🏗️ Building: $exeName"
        
        echo "🔍 Pre-build checks:"
        if (Test-Path "client.py") {
          echo "✅ client.py exists"
        } else {
          echo "❌ client.py missing!"
          exit 1
        }
        
        echo "🔧 Running PyInstaller..."
        pyinstaller --onefile `
          --name $exeName `
          --console `
          --log-level DEBUG `
          --hidden-import=aiohttp `
          --hidden-import=aiofiles `
          --hidden-import=asyncio `
          --hidden-import=requests `
          --hidden-import=psutil `
          --hidden-import=cryptography `
          --hidden-import=pkg_resources.extern `
          --hidden-import=win32api `
          --hidden-import=win32con `
          --hidden-import=win32gui `
          --hidden-import=pywintypes `
          --hidden-import=win32file `
          --hidden-import=pikepdf `
          --hidden-import=PIL `
          --hidden-import=secrets `
          --hidden-import=string `
          --hidden-import=re `
          --hidden-import=xml.etree.ElementTree `
          --collect-submodules=cryptography `
          --collect-submodules=win32api `
          --collect-submodules=pikepdf `
          --collect-all=PIL `
          --add-data="C:\hostedtoolcache\windows\Python\3.11.9\x64\Lib\site-packages\certifi\cacert.pem;certifi" `
          --noupx `
          client.py
          
        echo "📊 PyInstaller exit code: $LASTEXITCODE"
        
        if ($LASTEXITCODE -ne 0) {
          echo "❌ PyInstaller failed with exit code: $LASTEXITCODE"
          
          echo "📋 Contents of current directory:"
          Get-ChildItem
          
          echo "📋 Contents of dist directory (if exists):"
          if (Test-Path "dist") { 
            Get-ChildItem "dist" -Recurse 
          } else {
            echo "❌ dist directory doesn't exist"
          }
          
          echo "📋 Contents of build directory (if exists):"  
          if (Test-Path "build") {
            Get-ChildItem "build" -Recurse
          } else {
            echo "❌ build directory doesn't exist"
          }
          
          echo "📋 Looking for PyInstaller log files..."
          Get-ChildItem -Recurse -Filter "*.log" | ForEach-Object {
            echo "📄 Log file: $($_.FullName)"
            Get-Content $_.FullName -Tail 50
          }
          
          exit 1
        }
        
        $exePath = "dist/$exeName.exe"
        if (Test-Path $exePath) {
          $size = (Get-Item $exePath).Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          echo "✅ Build successful! File: $exePath"
          echo "📊 File size: $sizeMB MB"
        } else {
          echo "❌ Build failed - executable not found!"
          echo "📋 Contents of dist directory:"
          if (Test-Path "dist") { Get-ChildItem "dist" }
          exit 1
        }
      shell: pwsh

    - name: Test production executable
      run: |
        $exePath = "dist/PDF-Metadata-Tool-${{ steps.version.outputs.VERSION }}.exe"
        
        echo "🧪 Testing production executable..."
        
        # Test PE signature
        $signature = Get-Content $exePath -AsByteStream -TotalCount 2
        if ($signature[0] -eq 77 -and $signature[1] -eq 90) {
          echo "✅ Valid PE executable format"
        } else {
          echo "❌ Invalid executable format"
          exit 1
        }
        
        $fileInfo = Get-Item $exePath
        echo "📋 Final executable details:"
        echo "   Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
        echo "   Created: $($fileInfo.CreationTime)"
        echo "✅ Executable test completed"
      shell: pwsh

    # Continue with release creation...
    - name: Create Release  
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: PDF Metadata Tool ${{ steps.version.outputs.VERSION }}
        body: |
          ## 🚀 PDF Metadata Tool ${{ steps.version.outputs.VERSION }}
          
          ### ✨ What's Fixed
          - ✅ **FIXED:** Full PDF processing capabilities (pikepdf included)
          - ✅ **FIXED:** Enhanced build process with better error handling
          - ✅ **FIXED:** Complete dependency packaging
          
          ### 🔧 Features  
          - 📄 Full PDF metadata restoration
          - 🔐 PDF encryption/decryption support
          - 📅 Exact timestamp preservation
          - 🔄 3-folder workflow (original → edited → final)
        files: ./dist/PDF-Metadata-Tool-${{ steps.version.outputs.VERSION }}.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
