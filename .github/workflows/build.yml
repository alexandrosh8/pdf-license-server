name: Build and Release PDF Metadata Tool - Quick Fix

on:
  push:
    paths:
      - 'client.py'
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag for release'
        required: false
        default: ''

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'PDF-Metadata-Tool'

jobs:
  build:
    name: Build PDF Metadata Tool Executable
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        Write-Host "Installing Python dependencies..."
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pyinstaller==6.7.0
        python -m pip install aiohttp aiofiles psutil requests cryptography pywin32
        Write-Host "‚úÖ Dependencies installed successfully"
        
    - name: Verify client.py
      run: |
        Write-Host "Verifying client.py..."
        if (Test-Path "client.py") {
          Write-Host "‚úÖ client.py found"
          # Test syntax
          python -c "import ast; ast.parse(open('client.py').read()); print('‚úÖ Syntax validation passed')"
          # Show file info
          $fileInfo = Get-Item "client.py"
          Write-Host "File size: $($fileInfo.Length) bytes"
        } else {
          Write-Host "‚ùå client.py not found!"
          exit 1
        }
        
    - name: Extract version from client.py
      id: extract_version
      run: |
        $content = Get-Content client.py -Raw
        if ($content -match 'VERSION\s*=\s*["\']([^"\']+)["\']') {
          $version = $matches[1]
          Write-Host "Found version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        } else {
          $timestamp = Get-Date -Format "yyyy.MM.dd.HHmm"
          $version = "v$timestamp"
          Write-Host "No version found, using timestamp: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        }
        
    - name: Build executable with PyInstaller
      run: |
        $exeName = "${{ env.APP_NAME }}-v${{ steps.extract_version.outputs.version }}"
        Write-Host "Building executable: $exeName"
        
        # Build with PyInstaller using comprehensive hidden imports
        pyinstaller `
          --onefile `
          --clean `
          --noconfirm `
          --name $exeName `
          --log-level INFO `
          --hidden-import=aiohttp `
          --hidden-import=aiofiles `
          --hidden-import=asyncio `
          --hidden-import=json `
          --hidden-import=hashlib `
          --hidden-import=platform `
          --hidden-import=subprocess `
          --hidden-import=pathlib `
          --hidden-import=tempfile `
          --hidden-import=zipfile `
          --hidden-import=shutil `
          --hidden-import=logging `
          --hidden-import=threading `
          --hidden-import=requests `
          --hidden-import=psutil `
          --hidden-import=cryptography `
          --hidden-import=pkg_resources.extern `
          --hidden-import=win32api `
          --hidden-import=win32con `
          --hidden-import=win32gui `
          --hidden-import=pywintypes `
          client.py
          
        Write-Host "PyInstaller build command completed"
        
    - name: Verify build result
      run: |
        $exePath = "dist/${{ env.APP_NAME }}-v${{ steps.extract_version.outputs.version }}.exe"
        
        if (Test-Path $exePath) {
          $fileInfo = Get-Item $exePath
          Write-Host "üéâ BUILD SUCCESSFUL!"
          Write-Host "Executable: $($fileInfo.Name)"
          Write-Host "Size: $($fileInfo.Length) bytes"
          Write-Host "Location: $($fileInfo.FullName)"
          Write-Host "Created: $($fileInfo.CreationTime)"
          
          # Test basic executable functionality
          Write-Host "`nTesting executable..."
          try {
            # Try to run with --build flag to bypass license validation
            $testOutput = & $exePath --build 2>&1 | Out-String
            Write-Host "Executable test output (first 500 chars):"
            Write-Host $testOutput.Substring(0, [Math]::Min(500, $testOutput.Length))
            Write-Host "‚úÖ Executable runs successfully"
          } catch {
            Write-Host "‚ö†Ô∏è Executable test warning: $_"
            Write-Host "This may be expected if license validation is required"
          }
        } else {
          Write-Host "‚ùå BUILD FAILED - Executable not found"
          Write-Host "Expected path: $exePath"
          Write-Host "`nContents of dist directory:"
          if (Test-Path "dist") {
            Get-ChildItem "dist" | Format-Table Name, Length, LastWriteTime
          } else {
            Write-Host "dist directory does not exist"
          }
          
          Write-Host "`nLooking for build logs..."
          Get-ChildItem -Filter "*.log" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "=== LOG: $($_.Name) ==="
            Get-Content $_.FullName -Tail 20
          }
          exit 1
        }
        
    - name: Create GitHub release
      if: success()
      run: |
        $version = "v${{ steps.extract_version.outputs.version }}"
        $exePath = "dist/${{ env.APP_NAME }}-v${{ steps.extract_version.outputs.version }}.exe"
        
        $releaseNotes = @"
        ## PDF Metadata Tool Professional $version
        
        üîê Enterprise-grade PDF metadata restoration with secure licensing.
        
        ### ‚ú® Features
        - Advanced PDF metadata processing
        - Hardware-locked license validation  
        - Automatic update notifications
        - Professional UI design
        - Build mode for development/testing
        
        ### üìã Requirements
        - Windows 10/11 (64-bit)
        - Valid license key from halexandros25@gmail.com
        - Internet connection for license validation
        
        ### üöÄ Installation
        1. Download the executable below
        2. Run the executable
        3. Enter your license key when prompted
        4. Follow the on-screen instructions
        
        ### üîß For Developers
        - Use \`--build\` flag to bypass license validation during testing
        - Build mode automatically detected during PyInstaller builds
        - Comprehensive error logging and diagnostics included
        
        ### üìû Support
        - Email: halexandros25@gmail.com
        - License Server: https://pdf-license-server-dmyx.onrender.com
        - Repository: https://github.com/${{ github.repository }}
        
        ### üõ†Ô∏è Build Information
        - Python Version: ${{ env.PYTHON_VERSION }}
        - PyInstaller Version: 6.7.0
        - Build Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
        - Commit: ${{ github.sha }}
        - Workflow: ${{ github.workflow }}
        
        ---
        
        **Download the executable below and contact halexandros25@gmail.com for your license key.**
        "@
        
        Write-Host "Creating GitHub release: $version"
        gh release create $version $exePath --title "PDF Metadata Tool $version" --notes $releaseNotes --draft=false --prerelease=false
        Write-Host "‚úÖ Release created successfully"
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Notify license server
      if: success()
      run: |
        $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/v${{ steps.extract_version.outputs.version }}/${{ env.APP_NAME }}-v${{ steps.extract_version.outputs.version }}.exe"
        
        $notificationData = @{
          version = "v${{ steps.extract_version.outputs.version }}"
          download_url = $downloadUrl
          release_date = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
          build_number = "${{ github.run_number }}"
          commit_sha = "${{ github.sha }}"
          repository = "${{ github.repository }}"
          workflow_run = "${{ github.run_id }}"
        } | ConvertTo-Json
        
        try {
          Write-Host "Notifying license server..."
          $response = Invoke-RestMethod `
            -Uri "https://pdf-license-server-dmyx.onrender.com/api/release-notification" `
            -Method POST `
            -Body $notificationData `
            -ContentType "application/json" `
            -TimeoutSec 30
          
          Write-Host "‚úÖ License server notified successfully"
          Write-Host "Server response: $($response | ConvertTo-Json)"
        } catch {
          Write-Host "‚ö†Ô∏è License server notification failed (non-critical): $_"
          Write-Host "This doesn't affect the build success - server may be temporarily unavailable"
        }
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pdf-metadata-tool-${{ steps.extract_version.outputs.version }}
        path: |
          dist/
          *.spec
        retention-days: 30
        if-no-files-found: warn
        
    - name: Upload debug logs (if build failed)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-failure-logs-${{ github.run_number }}
        path: |
          build/
          *.log
          **/*.log
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Cleanup temporary files
      if: always()
      run: |
        Write-Host "Cleaning up temporary files..."
        # Remove build directory to save space (keep dist for artifacts)
        if (Test-Path "build") {
          Remove-Item -Path "build" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Build directory cleaned"
        }
        
        # Clean up any temporary log files
        Get-ChildItem -Filter "*.log" | Remove-Item -Force -ErrorAction SilentlyContinue
        Write-Host "‚úÖ Temporary files cleaned"
        
    - name: Build summary
      if: always()
      run: |
        Write-Host "=== BUILD SUMMARY ==="
        Write-Host "Workflow: ${{ github.workflow }}"
        Write-Host "Run ID: ${{ github.run_id }}"
        Write-Host "Commit: ${{ github.sha }}"
        Write-Host "Version: v${{ steps.extract_version.outputs.version }}"
        Write-Host "Timestamp: $(Get-Date)"
        
        $exePath = "dist/${{ env.APP_NAME }}-v${{ steps.extract_version.outputs.version }}.exe"
        if (Test-Path $exePath) {
          $fileInfo = Get-Item $exePath
          Write-Host ""
          Write-Host "üéâ BUILD SUCCESSFUL! üéâ"
          Write-Host "üì¶ Executable: $($fileInfo.Name)"
          Write-Host "üíæ Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          Write-Host "üîó Download from: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.extract_version.outputs.version }}"
          Write-Host ""
          Write-Host "üìã Next steps:"
          Write-Host "   1. Download the executable from the release"
          Write-Host "   2. Contact halexandros25@gmail.com for license key"
          Write-Host "   3. Run the executable and enter license when prompted"
          Write-Host ""
          Write-Host "üîß For testing: Use --build flag to bypass license validation"
        } else {
          Write-Host ""
          Write-Host "‚ùå BUILD FAILED"
          Write-Host "   Check the logs above for error details"
          Write-Host "   Download the failure logs artifact for debugging"
          Write-Host ""
          Write-Host "üîç Common solutions:"
          Write-Host "   1. Check client.py syntax with: python -c \"import ast; ast.parse(open('client.py').read())\""
          Write-Host "   2. Test imports with: python -c \"import client\""
          Write-Host "   3. Run the debug build workflow for detailed diagnostics"
          Write-Host "   4. Ensure BUILD_MODE detection is implemented in client.py"
        }
