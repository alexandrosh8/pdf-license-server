name: Build and Release PDF Metadata Tool

on:
  push:
    paths:
      - 'client.py'
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_client:
        description: 'Build client executable'
        required: false
        default: 'true'
      version_tag:
        description: 'Version tag for release'
        required: false
        default: ''

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'PDF-Metadata-Tool'

jobs:
  build:
    name: Build PDF Metadata Tool Executable
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pyinstaller==5.13.2
        python -m pip install aiohttp aiofiles psutil requests cryptography pywin32
        
    - name: Verify client.py exists
      run: |
        if (Test-Path "client.py") {
          Write-Host "client.py found"
        } else {
          Write-Host "client.py not found"
          Get-ChildItem
          exit 1
        }
        
    - name: Extract version
      id: extract_version
      run: |
        $content = Get-Content client.py -Raw
        if ($content -match 'VERSION\s*=\s*["\']([^"\']+)["\']') {
          $version = $matches[1]
          echo "version=$version" >> $env:GITHUB_OUTPUT
        } else {
          $timestamp = Get-Date -Format "yyyy.MM.dd.HHmm"
          $version = "v$timestamp"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        }
        
    - name: Build executable
      run: |
        $exeName = "${{ env.APP_NAME }}-v${{ steps.extract_version.outputs.version }}"
        
        pyinstaller --onefile --noconsole --clean --noconfirm --distpath dist --workpath build --name $exeName --hidden-import aiohttp --hidden-import aiofiles --hidden-import asyncio --hidden-import json --hidden-import hashlib --hidden-import platform --hidden-import subprocess --hidden-import pathlib --hidden-import tempfile --hidden-import zipfile --hidden-import shutil --hidden-import logging --hidden-import threading --hidden-import requests --hidden-import psutil --hidden-import cryptography --hidden-import pkg_resources.extern client.py
        
    - name: Verify build
      run: |
        $exePath = "dist/${{ env.APP_NAME }}-v${{ steps.extract_version.outputs.version }}.exe"
        if (Test-Path $exePath) {
          $fileInfo = Get-Item $exePath
          Write-Host "Build successful: $($fileInfo.Length) bytes"
        } else {
          Write-Host "Build failed - executable not found"
          Get-ChildItem dist
          exit 1
        }
        
    - name: Create release
      run: |
        $version = "v${{ steps.extract_version.outputs.version }}"
        $exePath = "dist/${{ env.APP_NAME }}-v${{ steps.extract_version.outputs.version }}.exe"
        
        $releaseNotes = @"
        ## PDF Metadata Tool Professional $version
        
        Enterprise-grade PDF metadata restoration with secure licensing.
        
        ### Features
        - Advanced PDF metadata processing
        - Hardware-locked license validation
        - Automatic update notifications
        - Professional UI design
        
        ### Requirements
        - Windows 10/11 (64-bit)
        - Valid license key
        - Internet connection for validation
        
        ### Support
        Contact: halexandros25@gmail.com
        License Server: https://pdf-license-server-dmyx.onrender.com
        "@
        
        gh release create $version $exePath --title "PDF Metadata Tool $version" --notes $releaseNotes
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Notify license server
      run: |
        $data = @{
          version = "v${{ steps.extract_version.outputs.version }}"
          download_url = "https://github.com/${{ github.repository }}/releases/tag/v${{ steps.extract_version.outputs.version }}"
          release_date = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
          build_number = "${{ github.run_number }}"
          commit_sha = "${{ github.sha }}"
        } | ConvertTo-Json
        
        try {
          Invoke-RestMethod -Uri "https://pdf-license-server-dmyx.onrender.com/api/release-notification" -Method POST -Body $data -ContentType "application/json" -TimeoutSec 30
          Write-Host "License server notified"
        } catch {
          Write-Host "License server notification failed: $_"
        }
        
    - name: Cleanup
      run: |
        Remove-Item -Path "build" -Recurse -Force -ErrorAction SilentlyContinue
        Get-ChildItem -Filter "*.spec" | Remove-Item -Force -ErrorAction SilentlyContinue

  notify_completion:
    name: Notify Build Completion  
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build.result == 'success'
      run: echo "Build completed successfully"
        
    - name: Notify failure
      if: needs.build.result == 'failure'
      run: echo "Build failed"
